{"ast":null,"code":"var _jsxFileName = \"/Users/mbpa1502/Documents/kundaliweb/src/Component/Video.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { AgoraVideoPlayer, createClient, createMicrophoneAndCameraTracks, ClientConfig, IAgoraRTCRemoteUser, ICameraVideoTrack, IMicrophoneAudioTrack } from \"agora-rtc-react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst config = {\n  mode: \"rtc\",\n  codec: \"vp8\"\n};\nconst appId = \"272cf4958be24646a190f58288eef1a4\"; //ENTER APP ID HERE\n\nconst token = null;\n\nconst Video = () => {\n  _s();\n\n  const [inCall, setInCall] = useState(false);\n  const [channelName, setChannelName] = useState(\"1\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"heading\",\n      children: \"Agora RTC NG SDK React Wrapper\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), inCall ? /*#__PURE__*/_jsxDEV(VideoCall, {\n      setInCall: setInCall,\n      channelName: channelName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(ChannelForm, {\n      setInCall: setInCall,\n      setChannelName: setChannelName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n}; // the create methods in the wrapper return a hook\n// the create method should be called outside the parent component\n// this hook can be used the get the client/stream in any component\n\n\n_s(Video, \"XNtoTSLIJiG1ZkGTJYttWbS1Ulo=\");\n\n_c = Video;\nconst useClient = createClient(config);\nconst useMicrophoneAndCameraTracks = createMicrophoneAndCameraTracks();\n\nconst VideoCall = props => {\n  _s2();\n\n  const {\n    setInCall,\n    channelName\n  } = props;\n  const [users, setUsers] = useState([]);\n  const [start, setStart] = useState[false]; // using the hook to get access to the client object\n\n  const client = useClient(); // ready is a state variable, which returns true when the local tracks are initialized, untill then tracks variable is null\n\n  const {\n    ready,\n    tracks\n  } = useMicrophoneAndCameraTracks();\n  useEffect(() => {\n    alert(channelName); // function to initialise the SDK\n\n    let init = async name => {\n      client.on(\"user-published\", async (user, mediaType) => {\n        await client.subscribe(user, mediaType);\n        console.log(\"subscribe success\");\n\n        if (mediaType === \"video\") {\n          setUsers(prevUsers => {\n            return [...prevUsers, user];\n          });\n        }\n\n        if (mediaType === \"audio\") {\n          var _user$audioTrack;\n\n          (_user$audioTrack = user.audioTrack) === null || _user$audioTrack === void 0 ? void 0 : _user$audioTrack.play();\n        }\n      });\n      client.on(\"user-unpublished\", (user, type) => {\n        console.log(\"unpublished\", user, type);\n\n        if (type === \"audio\") {\n          var _user$audioTrack2;\n\n          (_user$audioTrack2 = user.audioTrack) === null || _user$audioTrack2 === void 0 ? void 0 : _user$audioTrack2.stop();\n        }\n\n        if (type === \"video\") {\n          setUsers(prevUsers => {\n            return prevUsers.filter(User => User.uid !== user.uid);\n          });\n        }\n      });\n      client.on(\"user-left\", user => {\n        console.log(\"leaving\", user);\n        setUsers(prevUsers => {\n          return prevUsers.filter(User => User.uid !== user.uid);\n        });\n      });\n      await client.join(appId, name, token, null);\n      if (tracks) await client.publish([tracks[0], tracks[1]]);\n      setStart(true);\n    };\n\n    if (ready && tracks) {\n      console.log(\"init ready\");\n      init(channelName);\n    }\n  }, [channelName, client, ready, tracks]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [ready && tracks && /*#__PURE__*/_jsxDEV(Controls, {\n      tracks: tracks,\n      setStart: setStart,\n      setInCall: setInCall\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }, this), start && tracks && /*#__PURE__*/_jsxDEV(Videos, {\n      users: users,\n      tracks: tracks\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 27\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(VideoCall, \"IoZtF2+FMSsK8FC3YivabNJGpEo=\", false, function () {\n  return [useClient, useMicrophoneAndCameraTracks];\n});\n\n_c2 = VideoCall;\n\nconst Videos = props => {\n  const {\n    users,\n    tracks\n  } = props;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"videos\",\n      children: [/*#__PURE__*/_jsxDEV(AgoraVideoPlayer, {\n        style: {\n          height: '95%',\n          width: '95%'\n        },\n        className: \"vid\",\n        videoTrack: tracks[1]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), users.length > 0 && users.map(user => {\n        if (user.videoTrack) {\n          return /*#__PURE__*/_jsxDEV(AgoraVideoPlayer, {\n            style: {\n              height: '95%',\n              width: '95%'\n            },\n            className: \"vid\",\n            videoTrack: user.videoTrack\n          }, user.uid, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 17\n          }, this);\n        } else return null;\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 5\n  }, this);\n};\n\n_c3 = Videos;\nexport const Controls = props => {\n  _s3();\n\n  const client = useClient();\n  const {\n    tracks,\n    setStart,\n    setInCall\n  } = props;\n  const [trackState, setTrackState] = useState({\n    video: true,\n    audio: true\n  });\n\n  const mute = async type => {\n    if (type === \"audio\") {\n      await tracks[0].setEnabled(!trackState.audio);\n      setTrackState(ps => {\n        return { ...ps,\n          audio: !ps.audio\n        };\n      });\n    } else if (type === \"video\") {\n      await tracks[1].setEnabled(!trackState.video);\n      setTrackState(ps => {\n        return { ...ps,\n          video: !ps.video\n        };\n      });\n    }\n  };\n\n  const leaveChannel = async () => {\n    await client.leave();\n    client.removeAllListeners(); // we close the tracks to perform cleanup\n\n    tracks[0].close();\n    tracks[1].close();\n    setStart(false);\n    setInCall(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"controls\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: trackState.audio ? \"on\" : \"\",\n      onClick: () => mute(\"audio\"),\n      children: trackState.audio ? \"MuteAudio\" : \"UnmuteAudio\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: trackState.video ? \"on\" : \"\",\n      onClick: () => mute(\"video\"),\n      children: trackState.video ? \"MuteVideo\" : \"UnmuteVideo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      onClick: () => leaveChannel(),\n      children: \"Leave\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 8\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 174,\n    columnNumber: 5\n  }, this);\n};\n\n_s3(Controls, \"Y53Zw7W8grmkulS4E9par+oO9fw=\", false, function () {\n  return [useClient];\n});\n\n_c4 = Controls;\n\nconst ChannelForm = props => {\n  const {\n    setInCall,\n    setChannelName\n  } = props;\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"join\",\n    children: [appId === '' && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: \"Please enter your Agora App ID in App.tsx and refresh the page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 24\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter Channel Name\",\n      onChange: e => setChannelName(\"1\")\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: e => {\n        e.preventDefault();\n        setInCall(true);\n      },\n      children: \"Join\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 195,\n    columnNumber: 5\n  }, this);\n};\n\n_c5 = ChannelForm;\nexport default Video;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"Video\");\n$RefreshReg$(_c2, \"VideoCall\");\n$RefreshReg$(_c3, \"Videos\");\n$RefreshReg$(_c4, \"Controls\");\n$RefreshReg$(_c5, \"ChannelForm\");","map":{"version":3,"sources":["/Users/mbpa1502/Documents/kundaliweb/src/Component/Video.js"],"names":["React","useEffect","useState","AgoraVideoPlayer","createClient","createMicrophoneAndCameraTracks","ClientConfig","IAgoraRTCRemoteUser","ICameraVideoTrack","IMicrophoneAudioTrack","config","mode","codec","appId","token","Video","inCall","setInCall","channelName","setChannelName","useClient","useMicrophoneAndCameraTracks","VideoCall","props","users","setUsers","start","setStart","client","ready","tracks","alert","init","name","on","user","mediaType","subscribe","console","log","prevUsers","audioTrack","play","type","stop","filter","User","uid","join","publish","Videos","height","width","length","map","videoTrack","Controls","trackState","setTrackState","video","audio","mute","setEnabled","ps","leaveChannel","leave","removeAllListeners","close","ChannelForm","color","e","preventDefault"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport {\n  AgoraVideoPlayer,\n  createClient,\n  createMicrophoneAndCameraTracks,\n  ClientConfig,\n  IAgoraRTCRemoteUser,\n  ICameraVideoTrack,\n  IMicrophoneAudioTrack,\n} from \"agora-rtc-react\";\n\nconst config: ClientConfig = {\n  mode: \"rtc\", codec: \"vp8\",\n};\n\nconst appId: string = \"272cf4958be24646a190f58288eef1a4\"; //ENTER APP ID HERE\nconst token: string | null = null;\n\nconst Video = () => {\n  const [inCall, setInCall] = useState(false);\n  const [channelName, setChannelName] = useState(\"1\");\n  return (\n    <div>\n      <h1 className=\"heading\">Agora RTC NG SDK React Wrapper</h1>\n      {inCall ? (\n        <VideoCall setInCall={setInCall} channelName={channelName} />\n      ) : (\n        <ChannelForm setInCall={setInCall} setChannelName={setChannelName} />\n      )}\n    </div>\n  );\n};\n\n// the create methods in the wrapper return a hook\n// the create method should be called outside the parent component\n// this hook can be used the get the client/stream in any component\nconst useClient = createClient(config);\nconst useMicrophoneAndCameraTracks = createMicrophoneAndCameraTracks();\n\nconst VideoCall = (props: {\n  setInCall: React.Dispatch<React.SetStateAction<boolean>>;\n  channelName: string;\n}) => {\n  const { setInCall, channelName } = props;\n  const [users, setUsers] = useState([]);\n  const [start, setStart] = useState[false];\n  // using the hook to get access to the client object\n  const client = useClient();\n  // ready is a state variable, which returns true when the local tracks are initialized, untill then tracks variable is null\n  const { ready, tracks } = useMicrophoneAndCameraTracks();\n\n  useEffect(() => {\n    alert(channelName)\n    // function to initialise the SDK\n    let init = async (name: string) => {\n\n      client.on(\"user-published\", async (user, mediaType) => {\n        await client.subscribe(user, mediaType);\n        console.log(\"subscribe success\");\n        if (mediaType === \"video\") {\n\n          setUsers((prevUsers) => {\n            return [...prevUsers, user];\n          });\n        }\n        if (mediaType === \"audio\") {\n          user.audioTrack?.play();\n        }\n      });\n\n      client.on(\"user-unpublished\", (user, type) => {\n        console.log(\"unpublished\", user, type);\n        if (type === \"audio\") {\n          user.audioTrack?.stop();\n        }\n        if (type === \"video\") {\n\n          setUsers((prevUsers) => {\n            return prevUsers.filter((User) => User.uid !== user.uid);\n          });\n        }\n      });\n\n      client.on(\"user-left\", (user) => {\n        console.log(\"leaving\", user);\n        setUsers((prevUsers) => {\n          return prevUsers.filter((User) => User.uid !== user.uid);\n        });\n      });\n\n      await client.join(appId, name, token, null);\n      if (tracks) await client.publish([tracks[0], tracks[1]]);\n      setStart(true);\n\n    };\n\n    if (ready && tracks) {\n      console.log(\"init ready\");\n      init(channelName);\n    }\n\n  }, [channelName, client, ready, tracks]);\n\n\n  return (\n    <div className=\"App\">\n      {ready && tracks && (\n        <Controls tracks={tracks} setStart={setStart} setInCall={setInCall} />\n      )}\n      {start && tracks && <Videos users={users} tracks={tracks} />}\n    </div>\n  );\n};\n\nconst Videos = (props: {\n  users: IAgoraRTCRemoteUser[];\n  tracks: [IMicrophoneAudioTrack, ICameraVideoTrack];\n}) => {\n  const { users, tracks } = props;\n\n  return (\n    <div>\n      <div id=\"videos\">\n        {/* AgoraVideoPlayer component takes in the video track to render the stream,\n            you can pass in other props that get passed to the rendered div */}\n        <AgoraVideoPlayer style={{height: '95%', width: '95%'}} className='vid' videoTrack={tracks[1]} />\n        {users.length > 0 &&\n          users.map((user) => {\n            if (user.videoTrack) {\n              return (\n                <AgoraVideoPlayer style={{height: '95%', width: '95%'}} className='vid' videoTrack={user.videoTrack} key={user.uid} />\n              );\n            } else return null;\n          })}\n      </div>\n    </div>\n  );\n};\n\nexport const Controls = (props: {\n  tracks: [IMicrophoneAudioTrack, ICameraVideoTrack];\n  setStart: React.Dispatch<React.SetStateAction<boolean>>;\n  setInCall: React.Dispatch<React.SetStateAction<boolean>>;\n}) => {\n  const client = useClient();\n  const { tracks, setStart, setInCall } = props;\n  const [trackState, setTrackState] = useState({ video: true, audio: true });\n\n  const mute = async (type: \"audio\" | \"video\") => {\n    if (type === \"audio\") {\n      await tracks[0].setEnabled(!trackState.audio);\n      setTrackState((ps) => {\n        return { ...ps, audio: !ps.audio };\n      });\n    } else if (type === \"video\") {\n      await tracks[1].setEnabled(!trackState.video);\n      setTrackState((ps) => {\n        return { ...ps, video: !ps.video };\n      });\n    }\n  };\n\n  const leaveChannel = async () => {\n    await client.leave();\n    client.removeAllListeners();\n    // we close the tracks to perform cleanup\n    tracks[0].close();\n    tracks[1].close();\n    setStart(false);\n    setInCall(false);\n  };\n\n  return (\n    <div className=\"controls\">\n      <p className={trackState.audio ? \"on\" : \"\"}\n        onClick={() => mute(\"audio\")}>\n        {trackState.audio ? \"MuteAudio\" : \"UnmuteAudio\"}\n      </p>\n      <p className={trackState.video ? \"on\" : \"\"}\n        onClick={() => mute(\"video\")}>\n        {trackState.video ? \"MuteVideo\" : \"UnmuteVideo\"}\n      </p>\n      {<p onClick={() => leaveChannel()}>Leave</p>}\n    </div>\n  );\n};\n\nconst ChannelForm = (props: {\n  setInCall: React.Dispatch<React.SetStateAction<boolean>>;\n  setChannelName: React.Dispatch<React.SetStateAction<string>>;\n}) => {\n  const { setInCall, setChannelName } = props;\n\n  return (\n    <form className=\"join\">\n      {appId === '' && <p style={{color: 'red'}}>Please enter your Agora App ID in App.tsx and refresh the page</p>}\n      <input type=\"text\"\n        placeholder=\"Enter Channel Name\"\n        onChange={(e) => setChannelName(\"1\")}\n      />\n      <button onClick={(e) => {\n        e.preventDefault();\n        setInCall(true);\n      }}>\n        Join\n      </button>\n    </form>\n  );\n};\n\nexport default Video;\n"]},"metadata":{},"sourceType":"module"}